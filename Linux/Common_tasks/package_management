Package Management

// From "The Linux Command Line" - Chapter 14

The most important determinant of distribution quality is the packaging system and the vitality of the distributions support community. As we spend more time with  Linux, we see that its software landscape is extremely dynamic. Things are constantly changing. Most of the top-tier Linux distributions release new versions every six months and many individual program updates every day. To keep up with this blizzard of software, we need good tools for package management.

Package management is a method of installing and maintaining software on the system. Today, most people can satisfy all of their software needs by installing packages from their Linux distributor. This contrasts with the early days of Linux, when one had to download and compile source code in order to install software. Not that there is anything wrong with compiling source code; in fact, having access to source code is the great wonder of Linux. It gives us (and everybody else) the ability to examine, learn from and improve the system. It's just that working with a precompiled package is faster and easier.

Different distributions use different packaging systems, and as a general rule a package intended for one distribution is not compatible with another. Most distributions fall into one of two camps of packaging technologies: the Debian .deb camp and the Red Hat .rpm camp. There are come important exceptions, such as Gentoo, Slackware, and Foresight, but most others use one of the two main packaging systems.

How a packaging system works
The method of software distribution found in proprietary software industry usually entails buying a piece of installation media such as an "install disk " and then running an "installaion wizard" to install a new application. Linux doesn't work that way. Virtually all software for a Linux system is found on the Internet. Most of it is provided by the distribution vendor in the form of package files, and the rest is available in source code form, which can be install manually.

Package Files
The basic unit of software in a packaging system is the package file. 
	1. A package file is a collection of files that comprise the software package. 
		a. A package may consist of numerous programs and data files that support the programs. 
	2. In addition to the files to be installed, the package files also includes metadata above the package, such as a text description of the package and its contents. 
	3. Many packages contain pre- and post-installation scripts that perform configuration task before and after package installation

Package files are created by a person known as a package maintainer, often (but not always an employee of the distribution vendor). The package maintainer gets the software in source code form from the upstream provider (the author of the program), compiles it, and creates the package metadata and any necessary installation scripts. Often, the package maintainer will apply modifications to the original source code to improve the program's integration with other parts of the Linux distribution.

Repositories
While some software projects choose to perform their own packaging and distribution, most packages today are created by the distribution vendors and interested third parties. Packages are made available to the users of a distro in the central repo, which may contain thousans of packages, each specially built and maintained for the distro.

A distro may maintain several different repositories for different stages of the software development life cycle. For example, there will usually be a testing repository, which contains packages that have just been built and are intended for use by brave souls who are looking for bugs before teh packages are released for general distribution. A distro will often have a development repository where work in progress packages destined for inclusion in the distros next major release are kept

A distro may also have related third party repositories. These are often needed to supply software that, for legal reason such as patents or DRM anticircumvention issues, cannot  be included in the distribution. Perhaps the best-known case is that of encrypted DVD support, which is not legal in the United States. The third party repos operate in countries where software patents and anticircumvention laws don't apply. These repos are usually wholly independent of the distro they support, and to use them one know about them and manually include them in the configuration files the package management system.

Dependencies
Programs seldom stand alone; rather they rely on the presence of other software components to get their work done. Common activities, such as input/ouput for example, are handled by routines shared by many other programs. These routines are stored in what are called shared libraries, which provide essential services to more than one program. If a package requires a shared resource shared as a shared library, it is said to have a dependency. Modern package management systems all provide some method of dependency resolution to ensure that when a package is installed, all of its dependencies are installed, too.

High and low level package tools
Package management systems usually consist of two types of tools: low-level tools that handle task such as installing and removing package files, and high-level tools that perform metadata searching and dependency resolution.

Common package management tasks
Many operations can be performed with the command -line package management tools. We will look at the most common ones here.

Finding a package in a repository
By using the high level tools to search repository metadata, one can locate a package based on its name or description

Querying package databases

queries the local database with the -Q flag
$ pacman -Q --help

queries the sync databases -S
$ pacman -S --help

Update all packages on the system

# pacman -Syu

The main options are (from $ info  pacman)

-S 		--sync. Synchronise packages. Packages are installed directly from remote repositories, including all dependencies required to run the packages. For example, pacman -S qt will downlaoad and install qt and all the packages depends on. If a package name exists in more than one repository, the repository can be explicitly specified to clarify the package to install.
		-Su will upgrade all packages that are out-of-date. When upgrading pacman, pacman performs comparison to determine which packages need upgrading. 
-Q   	--query. Query the package database. This operation allows you to view installed packages their files, as well as meta-information about individual packages. This can be run against the local package database or can be used on individual package files. In the first, if no package names are provided in the command line, all installed packages will be queried. This comes with many options
		-c, --changelog: View the ChangeLog of a package if exists
		-e, --explicit: Restrict or filter output to explicitly installed packages. 
		-i, --info: Display the info of a given package
		-k, --check: Check that all files owned by the given package are present on the system. 
		-l, --list: List all files owned by a given package
		-q, --quiet: Show less information for certain query operations. This is useful when pacman's output is processed in a script. Search will only show package names and not version, group, and description information. 
		-s, --search <regexp>: Search each locally-installed package for names or descriptions that match regexp.
-D  	--database. Operate on the package database. This option allows you to modify certain attributes of the installed packages in pacman's database. It also allows you to check the databases for internal consistency.
-R  	--remove. Remove package(s) from the system. Groups can also be specified to be removed. See info pacman for options.
-T  	--deptest. Check dependencies
-U 		--upgrade. Upgrade or add package(s) to the system and install the required dependencies from sync repositories. Either a URL or file path can be specified. This is a "remove-than-add" process.
-F 		--files. Query the files database. This operation allows you to look packages owning certain files or display files owned by certain packages. Only packages that are part of your sync database are searched.


The Linux Software Installation Myth
People migrating from other platforms sometimes fall victim to the myth that software is difficult to install under Linux and that the variety of packaging schemes used by different distros is a hindrance. We, it is a hindrance, but only  to propreitary software vendors who wish to distribute binary-only version of their secret software.
The Linux software ecosystem is based on the idea of open source code. If a program developer releases source code for a product, it is likely that a person associated with a distribution will package the product and include it in the repository. This method ensures that the product is well integrated into the distro and the user is given the convenience of one-stop shopping for software, rather than having to search for each product's website.
Device drivers are handled in much the same way, except that instead of being separate items in a distribution's repository, they become part of the Linux kernel itself. Generally speaking, there is no such thing as a "driver disk" in Linux. Either the kernel supports a device or it doesn't, and the Linux kernel supports a lot of devices. Many more, in fact, than windows does. Of course, this is no consolation if the particular device you need is not supported. When that happens, you need to look at the cause:
	The device is too new
	The device is too exotic
	The hardware vendor is hiding something.