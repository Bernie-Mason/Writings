Formatting Output

In this chapter we'll focus on programs that are used to format text output rather than change the text itself. These tools are often used to prepare text for printing, a subject that we will cover in the next chapter. The programs that we will cover in this chapter include:

	nl - number lines
	fold - wrap each line to a specified length
	fmt - A simple text formatter
	pr - format text for printing
	printf - format and print data
	groff - A document formatting system

Simple tools

nl - number lines:

	[bernie@antergos_vb foo]$ nl distros.txt | head
	     1	SUSE	10.2	12/07/2006
	     2	Fedora	10	11/25/2008
	     3	SUSE	11.0	06/19/2008
	     4	Ubuntu	8.04	04/24/2008
	     5	Fedora	8	11/08/2007
	     6	SUSE	10.3	10/04/2007
	     7	Ubuntu	6.10	10/26/2006
	     8	Fedora	7	05/31/2007
	     9	Ubuntu	7.10	10/18/2007
	    10	Ubuntu	7.04	04/19/2007

Like cat, nl can accept either multiple filenames as command-line arguments or standard input:

	[bernie@antergos_vb foo]$ cat distros.txt | nl | head
	     1	SUSE	10.2	12/07/2006
	     2	Fedora	10	11/25/2008
	     3	SUSE	11.0	06/19/2008
	     4	Ubuntu	8.04	04/24/2008
	     5	Fedora	8	11/08/2007
	     6	SUSE	10.3	10/04/2007
	     7	Ubuntu	6.10	10/26/2006
	     8	Fedora	7	05/31/2007
	     9	Ubuntu	7.10	10/18/2007
	    10	Ubuntu	7.04	04/19/2007

nl supports a concept called logical pages when numbering. This allows nl to reset (start over) the numerical sequence when numbering. Using options, it is possible to set the starting number to specific number.

A logical page is further broken down into a header, body and footer. Within each of these sections, line numbering may be reset and/or be assigned a different style. If nl is given multiple files, it treats them as a single stream of text. Sections in the text stream are indicated by the presence of some rather odd-looking markup added ot the text:

nl Markup

\:\:\:	Start of logical-page header
\:\: 	Start of logical-page body
\: 		Start of logical-page footer

We can modify the distros.sed script that we made in the previous chapter. Since we'll be using nl, it will be useful to include its header/body/footer markup so nl knows what it needs to number and what it should leave alone.

# sed script to produce Linux distros report

1 i\
\\:\\:\\:\
\
Linux Distributions Report\
\
Name		Ver.	Released\
----		----	--------\
\\:\\:
s/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{4\}\)$/\3-\1-\2/
y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/
$ a\
\\:\
\
End Of Report

The script now inserts nl logical-page markup and adds a footer at the end of the report. Note that we had to double up the backslashes in  our markup, because sed normally treats them as escape characters. Remember that sort is sorting by field 1 first then field 2 which it's told is numeric. It then passes this sorted list to sed which converts the date time as well as formating the text with a header and footer.

[bernie@antergos_vb foo]$ sort -k 1,1 -k 2n distros.txt | sed -f distros.sed | nl

       
       Linux Distributions Report
       
       Name		Ver.	Released
       ----		----	--------

     1	FEDORA	5	2006-03-20
     2	FEDORA	6	2006-10-24
     3	FEDORA	7	2007-05-31
     4	FEDORA	8	2007-11-08
     5	FEDORA	9	2008-05-13
     6	FEDORA	10	2008-11-25
     7	SUSE	10.1	2006-05-11
     8	SUSE	10.2	2006-12-07
     9	SUSE	10.3	2007-10-04
    10	SUSE	11.0	2008-06-19
    11	UBUNTU	6.06	2006-06-01
    12	UBUNTU	6.10	2006-10-26
    13	UBUNTU	7.04	2007-04-19
    14	UBUNTU	7.10	2007-10-18
    15	UBUNTU	8.01	2008-10-30
    16	UBUNTU	8.04	2008-04-24

       
       End Of Report

We can see that nl has obeyed it's default that it should only number lines in the body

fold - wrap each line to a specified length
Folding is the process of breaking lines of text at a specified width. Like other commands, fold accepts either one or more text files or standard input.

	[bernie@antergos_vb foo]$ echo "The quick brown fox jumped over the lazy dog" | fold -w 12
	The quick br
	own fox jump
	ed over the 
	lazy dog

If no width is specified the default is 80 characters.

fmt - a simple text formatter
The fmt program also folds text, plus a lot more. It accepts either files of standard input and performs paragraph formatting on the text stream. Basically, it fills and joins lines in next while preserving blank lines and indentation

pr - format text for printing
The pr program is used to paginate text. When printing text, it is often desirable to separate the pages of output with several lines of whitespace to provide a top and bottom margin for each page. Further, this whitespace can be used to insert a header and footer on each page. 
	We'll demonstrate pr by formatting our distros.txt file into a series of very short pages:


[bernie@antergos_vb foo]$ pr -l 15 -w 65 distros.txt


2017-05-22 14:26                distros.txt                Page 1


SUSE	10.2	12/07/2006
Fedora	10	11/25/2008
SUSE	11.0	06/19/2008
Ubuntu	8.04	04/24/2008
Fedora	8	11/08/2007







2017-05-22 14:26                distros.txt                Page 2


SUSE	10.3	10/04/2007
Ubuntu	6.10	10/26/2006
Fedora	7	05/31/2007
Ubuntu	7.10	10/18/2007
Ubuntu	7.04	04/19/2007

...etc


In this example, we employ the -l option (for page length) and the -w option (page width) to define a "page" that is 65 characters wide and 15 lines long. It also creates a default header.

printf - format and print data
Unlike the other commands in this chapter, the printf command is not used for pipelines (it doesn't accept standard input), nor does it find frequent application directly on the command line.

printf was originally developed for the C programming language and has been implemented in many programming languages, including the shell. In fact, in bash, printf is a built-in.

	print "format" arguments

The command is given a string containing a format description, which is then applied to a list of arguments. The formatted result is sent to standard output.

	[bernie@antergos_vb foo]$ printf "I formatted the string: %s\n" foo
	I formatted the string: foo

The format string may contain literal text (as above); escape sequences (such as \n); and sequences beginning with the % character, which are called conversion specifications. In the example, above the conversion specification %s is used to format the string foo and place it in the commands output:

	[bernie@antergos_vb foo]$ printf "I formatted the %s string: \n" foo
	I formatted the foo string: 
	[bernie@antergos_vb foo]$ printf "I formatted the '%s' string: \n" foo
	I formatted the 'foo' string: 

As we can see, the %s conversion specification is replace by the string foo. The s conversion is used to format string data. There are other specifiers for other kinds of data

Specifier 	Description
d 			Format a number as a signed decimal integer	
	[bernie@antergos_vb foo]$ printf "I formatted the %d string: \n" -4
	I formatted the -4 string: 
f 			Format and output a floating point number

[bernie@antergos_vb foo]$ printf "%d, %f, %o, %s, %x, %X\n" 380 380 380 380 380 380
380, 380.000000, 574, 380, 17c, 17C

Since we specified six conversion specifiers, we must also supply six arguments. A complete conversion specification may consist of the following:
	
	%[flags][width][.precision]conversion_specification

Multiple optional components, when used, must appear in the order specified above to be properly interpreted.

printf is mostly used in scripts, where it is employed to format tabular data, rather than on the command line directly. But we can still show how it can be used to solve various formatting problems. First, let's output some fields separated by tab characters:

[bernie@antergos_vb foo]$ printf "%s\t%s\t%s\n" str1 str2 str3
str1	str2	str3

By inserting the \t (the escape sequence for a tab), we achieve the desired effect. Next, some numbers with neat formatting:



Document formatting systems
Text formatting tools are good for small, simple tasks, but what about largere jobs? One of the reasons that Unix became a popular operating system among technical and scientific users (aside from providing a powerful multitasking, multiuser environment for all kinds of  software development) is that it offered tools that could be used to produce many types of documents, particularly scientific and academic publications. In fact, as the GNU documentation describes, document preparation was instrumental to the development of Unix.

	The first version of UNIX was developed on a PDP-7 which which was sitting around Bell Labs. In 1971 the developers wanted to get a PDP-11 for further work on the operating system. In order to justify the cost for this system, they proposed that they would implement a document formatting system for the AT&T patents division. This first formatting system was a reimplementation of McIllroy's roff written by J.F. Ossanna

The roff Family and TEX
Two main families of document formatters dominate the field: those descended from the original roff program, including nroff and troff, and those based on Donald Knuth's TEX typesetting system. 

The name roff is derived from the term run off as in "I'll run off a copy for you". The nroff program is used to format documents for output to devices that use monospaced fonts, such as character terminals and typewriting style printers. At the time of its introduction, this included nearly all printing devices attached to computers. The later troff program formats documents for output on typesetters, devices used to produce "camera-ready" type for commercial printing. Most computer printers today are able to simulate the output of typesetters. The roff family also includes some other programs that are used to prepare portions of documents.  

groff - a document formatting system

groff is a suite of programs containing the GNU implementation of troff. It also includes a script that is used to emulate nroff and the rest of the roff family as well.

Let's have a look at the uncompressed contents of the ls man page:

	[bernie@antergos_vb foo]$ zcat /usr/share/man/man1/ls.1.gz | head
	.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
	.TH LS "1" "March 2017" "GNU coreutils 8.27" "User Commands"
	.SH NAME
	ls \- list directory contents
	.SH SYNOPSIS
	.B ls
	[\fI\,OPTION\/\fR]... [\fI\,FILE\/\fR]...
	.SH DESCRIPTION
	.\" Add any additional description here
	.PP

Compared to the man page in its normal presentation, we can begin to see a correlation between the markup language and its results:

[bernie@antergos_vb foo]$ man ls | head
LS(1)                                        User Commands                                       LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List  information  about the FILEs (the current directory by default).  Sort entries alphabeti‐
[

This is of interest because man pages are actually rendered by groff, using the mandoc package. In fact, we can simulate the man command with this pipeline: 

[bernie@antergos_vb foo]$ zcat /usr/share/man/man1/ls.1.gz | groff -mandoc -T ascii | head
LS(1)                            User Commands                           LS(1)



NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

Here we use the groff program with the options to specify the mandoc macro package and the output driver for ASCII.groff can produce output in several formats. If no format is specified, PostScript is output by default.

[bernie@antergos_vb foo]$ zcat /usr/share/man/man1/ls.1.gz | groff -mandoc | head
%!PS-Adobe-3.0
%%Creator: groff version 1.22.3
%%CreationDate: Tue May 23 13:48:00 2017
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 3
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: Default 595 842 0 () ()

PostScript is a page-description language that is used to describe the contents of a printed page to a typesetter-like device. We can take the output of our command store it into a file:

[bernie@antergos_vb foo]$ zcat /usr/share/man/man1/ls.1.gz | groff -mandoc > ~/Desktop/foo.ps

We can also convert the postscript file to pdf:

[bernie@antergos_vb Desktop]$ ps2pdf ~/Desktop/foo.ps ~/Desktop/ls.pdf

For the last example we'll revisit our distros.txt. This time we'll use the tbl program, which is used to format tables, to typeset our list of Linux distros. To do this, we're going to modify our sed script:

# sed script to produce Linux distros report

1 i\
.TS\
center box;\
cb s s\
cb cb cb\
l n c.\
Linux Distributions Report\
=\
Name		Ver.	Released\
_
s/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{4\}\)$/\3-\1-\2/
$ a\
.TE

Note that for the script to work properly, care must be taken to see that the words Name Version Released are separated by tabs, not spaces. The rows following .TS request define the global properties for the table


[bernie@antergos_vb foo]$ sort -k 1,1 -k 2n distros.txt | sed -f distros-tbl.sed | groff -t -T ascii 2>/dev/null
                  +----------------------------+
                  |Linux Distributions Report  |
                  +----------------------------+
                  | Name               Ver.    |
                  +----------------------------+
                  |Fedora    5      2006-03-20 |
                  |Fedora    6      2006-10-24 |
                  |Fedora    7      2007-05-31 |
                  |Fedora    8      2007-11-08 |
                  |Fedora    9      2008-05-13 |
                  |Fedora   10      2008-11-25 |
                  |SUSE     10.1    2006-05-11 |
                  |SUSE     10.2    2006-12-07 |
                  |SUSE     10.3    2007-10-04 |
                  |SUSE     11.0    2008-06-19 |
                  |Ubuntu    6.06   2006-06-01 |
                  |Ubuntu    6.10   2006-10-26 |
                  |Ubuntu    7.04   2007-04-19 |
                  |Ubuntu    7.10   2007-10-18 |
                  |Ubuntu    8.01   2008-10-30 |
                  |Ubuntu    8.04   2008-04-24 |
                  +----------------------------+

