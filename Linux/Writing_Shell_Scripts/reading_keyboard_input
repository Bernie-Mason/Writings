Reading Keyboard Input

The scripts that we've written so far aren't very reactive (in fact they have zero interactivity).

read - Reading values from standard input (the keyboard!)

This has the following syntax:

	read [-options] [variable ...]

Options like -a (array), -d (delimiter), -e (use Readline to handle input), -n (read number of characters of input), -p (prompt), -r (raw mode), -s (silent), -t (timeout)

We can modify the test integer script from the last chapter into a read integer one:

#!/bin/bash

# read-integer: evaluate the value of an integer

echo -n "Please enter an integer"
read int

if [[ "$int" =~ ^-?[0-9]+$ ]]; then
	if (( int == 0 )); then
		echo "integer is zero"
	else
		if (( int < 0 )); then
			echo "integer is negative"
		else
			echo "integer is positive"
		fi
		if (( (( int % 2 )) == 0 )); then
			echo "integer is even"
		else
			echo "integer is odd"
		fi
	fi
else
	echo "integer is not a number!" >&2
	exit 1
fi

We use the -n option with echo to suppress the trailing newline. echo displays a prompt and then ues read to input a value for the variable int. Running this script yields:

[bernie@antergos_vb Writing_Shell_Scripts]$ read_integerPlease enter an integer -> -43
integer is negative
integer is odd

read can assign input to multiple variables, as shown here:
#!/bin/bash

# read-multiple: read multiple variables from keyboard

echo -n "Enter one or more values > "
read var1 var2 var3 var4 var5

echo "var1 = '$var1'"
echo "var2 = '$var2'"
echo "var3 = '$var3'"
echo "var4 = '$var4'"
echo "var5 = '$var5'"


Which then:

[bernie@antergos_vb Writing_Shell_Scripts]$ read_multiple
Enter one or more values > 1 2 3 4 e
var1 = '1'
var2 = '2'
var3 = '3'
var4 = '4'
var5 = 'e'

If read receives fewer than the expected number, the extra variables are empty. If no variables are specified then a shell variable REPLY will be assigned all the input.

Instead of prefacing with echo we can use the p (prompt ooption with read:

read -p "Enter one or more lines -> "
echo "Reply = '$REPLY'"

Separating Input Fields with IFS

Normally, the shell performs word splitting on the input provided to read. As we have seen, this means that multiple words separated by one or more space become separate items on the input line and are assigned to separate variables by read. This behavior is configured by a shell variable named IFS (internal field separator). THe default value of IFS contains a space, a tab and a newline character, each of which will separate items form one another.

We can adjust IFS to control separation of fields input to read. For example, the /etc/passwd file contains lines of data that use the colon character as a field separator. By changing the value of IFS to a single colon, we can use read to input the contents of /etc/passwd and successfully separate fields into different variables.



#!/bin/bash

#read_ifs: reads fields from a file

FILE=/etc/passwd

read -p "Enter a username > " user_name

file_info=$(grep "^$user_name:" $FILE)

if [ -n "$file_info" ]; then
	IFS=":" read user pw uid guid name home shell <<< "$file_info"
	echo "User = 		'$user'"
	echo "UID = 		'$guid'"
	echo "GID =			'$guid'"
	echo "Full name = 	'$name'"
	echo "Home Dir. = 	'$home'"
	echo "Shell = 		'$shell'"
else
	echo "No such user '$user_name'" >&2
	exit 1
fi

This script prompts the user to enter the username of an account on the systems and then displays the different fields found in the users record.

The script has two interesting lines. First the grep command allowing file info to be populated with aline from the $FILE variable that begin with $user_name:

file_info=$(grep "^$user_name:" $FILE)

we can see the effect of this command by running it in the shell:

[bernie@antergos_vb bin]$ grep "^bernie:" /etc/passwd 
bernie:x:1000:100:bernie,,,,:/home/bernie:/bin/bash

This regular expression used by grep ensures that the username will match only a single file in the /etc/passwd file. As we can see, this line is delimited by colons!

The second interesting line is as follows

	IFS=":" read user pw uid guid name home shell <<< "$file_info"

It consists of three parts. A variable assignment, a read command with a list of variable names as arguments and a strange new redirection operator that we'll get to in a second. First let's have a look at how this badboy fairs on the command line:

[bernie@antergos_vb Writing_Shell_Scripts]$ cat ~/bin/read_ifs >> reading_keyboard_input
[bernie@antergos_vb Writing_Shell_Scripts]$ read_ifs
Enter a username > bernie
User = 		'bernie'
UID = 		'100'
GID =			'100'
Full name = 	'bernie,,,,'
Home Dir. = 	'/home/bernie'
Shell = 		'/bin/bash'

Great. Works. Back to that mysterious line. The variable assignment part. The shell allows one or more variable assingments to take place immediately before a comand. These assignments alter the environment for the command that follows. The effect of the assignments alter the environment for the command that follows, only for the duration of the command (changing IFS to the colon character).

The <<< operator indicates a here string. This is like a here document, only shorter, consisting of a single string. In our example, the line of data from the /etc/passwd file is fed to the standard input of the read command. We might wonder why this rather oblique method was chosen rather than
	
	echo "$file_info" | IFS=":" read user ... etc

Welp, you can't pipe read

Although read normally takes input from standard input, you cannot do this:

	echo "foo" | read

This will be run fine by the interpreter but the REPLY variable will be empty. Why?
This is to do with how the shell handles pipelines. In bash, pipelines create subshells. These are copies of the shell and its environment that are used to execute the command in the pipeline. In the above example, read is executed in a subshell. So what?
Subshells in Unix-like systems create copies of the environment for the processes to use while they execute. These copies are destroyed once the process is complete. 

	This means that a subshell can never alter the environment of its parent process. 

read assigns variables, which then become part of the environment. In the example above, read assigns the value foo to the variable REPLY in the subshell's environment, but when the command exits, the subshell and its environment are destroyed, and the effect of the assignment is lost.
Using here strings is one way to work around this behavior

Validating input
Very often, the difference between and well and poorly written program lies in it's ability to deal with unexpected input. Here is a program with some good validation put in place:


#!/bin/bash

# read_validate: validate input

invalid_input() {
	echo "Invalid input '$REPLY'" >&2
	exit 1
}

read -p "Enter a single item > "

# input is empty (invalid)
[[ -z $REPLY ]] && invalid_input # The logical && operator states here that if the first expression evaluates to true then the invalid_input function will be run

# input is multiple items (invalid)
(( $(echo $REPLY | wc -w) > 1 )) && invalid_input
# echo $REPLY gives the REPLY string contents
# wc -w gives the word counts

# is input a valid filename?
if [[ $REPLY =~ ^[-[:alnum:]\.]+$ ]]; then
		echo "'$REPLY' is a valid filename."
		if [[ -e $REPLY ]]; then
			echo "And file '$REPLY' exists."
		else
			echo "However, file '$REPLY' doesn't exist"
		fi
		
		# is input a floating point number?
		if [[ $REPLY =~ ^-?[[:digit:]]*\.[[:digit:]]+$ ]]; then
			echo "'$REPLY' is a floating point number"
		else
			echo "'$REPLY' is not a floating point number"
		fi

		# is input an integer
		if [[ $REPLY =~ ^-?[[:digit:]]+$ ]]; then
			echo "'$REPLY' is an integer"
		else
			echo "'$REPLY' is not an integer"
		fi
else
	echo "The string '$REPLY' is not a valid filename"
fi

Menus

A common type of interactivity is called menu drives. In menu-driven programs, the user is presented with a list of choices and is asked to choose one. For example. 

#!/bin/bash

# read_menu: a menu driven system information program

clear
echo "
Please Select:

1. Display System Information
2. Display Disk Space
3. Display Home Space Utilisation
q. Quit
"
read -p "Enter selection [1-3,q] > "

if [[ $REPLY =~ ^[1-3q]$ ]]; then 
		if [[ $REPLY == "q" ]]; then
				echo "Program terminated"
				exit
		fi
		if (( $REPLY == 1 )); then
				echo "Hostname: $HOSTNAME"
				uptime
				exit
		fi
		if (( $REPLY == 2 )); then
				df -h
				exit
		fi
		if (( $REPLY == 3 )); then
			if (( $(id -u) == 0 )); then
					echo "Home Space Utilisation (All users)"
					du -sh /home/*
			else
					echo "Home Space Utilisation ($USER)"
					du -sh $HOME
			fi
			exit
		fi
else
	echo "Invalid entry" >&2
	exit 1
fi

The script is logically divided into two parts. The first part displays the menu and inputs the response from the user. The second part identifies the response and carries out the selected action. Notice the use of the exit command in this script. It is used here to prevent the script from executing unnecessary code after an action has been carred out. 
		
Rewrote valid input to use test expressions rather than compound expressions. Pretty sure that this can be refined further but the step by step helps me to understand what's going on better:


#!/bin/bash

# read_validate: validate input

invalid_input() {
	echo "Invalid input '$REPLY'" >&2
	exit 1
}

read -p "Enter a single item > "

# input is empty (invalid)
[ -z "$REPLY" ] && invalid_input # The logical && operator states here that if the first expression evaluates to true then the invalid_input function will be run

# input is multiple items (invalid)
(( $(echo $REPLY | wc -w) > 1 )) && invalid_input
# echo $REPLY gives the REPLY string contents
# wc -w gives the word counts

# is input a valid filename?
#VALIDFILENAME=echo "$REPLY" | grep -E '^[-[:alnum:]\.]+$'
echo "$REPLY" | grep -E '^[-[:alnum:]\.]+$' > /dev/null
EXITSTATUS=$?
#if [ -z (echo "$REPLY" | grep -E '^[-[:alnum:]\.]+$') ]; then
#if [ -z "$VALIDFILENAME" ]; then
if [ $EXITSTATUS -eq 0 ]; then
		echo "'$REPLY' is a valid filename."
		if [ -e "$REPLY" ]; then
			echo "And file '$REPLY' exists."
		else
			echo "However, file '$REPLY' doesn't exist"
		fi
		
		# is input a floating point number?
		FLOATINGPOINTES=$(echo "$REPLY" | grep -E '^-?[[:digit:]]*\.[[:digit:]]+$')  > /dev/null
		EXITSTATUS=$?
		if [ "$EXITSTATUS" -eq 0 ]; then 
			echo "'$REPLY' is a floating point number"
		else
			echo "'$REPLY' is not a floating point number"
		fi

		# is input an integer
		INTEGERES=$(echo "$REPLY" | grep -E '^-?[[:digit:]]+$' )  > /dev/null
		EXITSTATUS=$?
		if [ "$EXITSTATUS" -eq 0 ]; then 
			echo "'$REPLY' is an integer"
		else
			echo "'$REPLY' is not an integer"
		fi
else
	echo "The string '$REPLY' is not a valid filename"
fi
