// The Linux Command Line
Manipulating files and directories

Commands of note:
cp - copy files or directories
	cp item1 item2 - copy a single file or directory item1 to file or directory item2.
	cp item1 item2 dir1 - copy multiple files or directories
		cp options:
		-a, --archive - copy the files and directories and all of their attributes including ownerships and permissions. Normally, copies take on the default attributes of the user performing the copy
		-i, --interactive - Before overwriting an existing file, prompt the user for confirmation. If this option is not specified, cp will silently overwrite files.
		-r, --recursive - Recursively copy directories and their contents. This option is required (or -a) when copying directories
		-u, --update - When copying files from one directory to another, copy only files that either don't exist or are newer than the existing corresponding files in the destination directory
		-v --verbose - Display information messages as the copy is performed
mv - move/rename files and directories. This performs both the file moving and renaming, depending on how it is used.
	mv item1 item2 - to move or rename file or directory item1 to item2
		mv options, -v, -u, -i
mkdir - create directories
	mkdir dir1
	mkdir dir1 dir2 dir3
rm - remove files and directories
	rm item
		rm options:
		-v, -r, -i
		-f, --force - Ignore nonexistent files and do not prompt. This overrides the --interactive option.
ln - create hard and symbolic links
	ln file link - hard link
	ln -s file link - symbolic link

Now, to be frank, some of the tasks carried out by these commands are more easily carried out with a graphical file manager. So why use these commands at all?

The answer is power and flexibility. While is easy to perform simple file manipulations in a GUI, complicated tasks can be easier with the command-line manager. For example, how could we copy all HTML files from one directory to another - but only  those that do not exist in the destination directory or are newer than the versions in the destination directory. Pretty hard in a file manager. Pretty easy with the command line:
cp -u *.html destination

Wildcards
Before making use of our commands we need to talk about the shell and what makes these commands so powerful. Because the shell uses filenames so much, it provides special characters to help you rapidly specify groups of filenames. These special characters are called wildcards. Using wildcards, also known as globbing, allows you to select filenames based on patterns of characters. 

Wildcard 		Matches
*				Any characters
?				Any single character
[characters]	Any character that is a member of the set of characters
[!characters]	Any character that is not a member of the set of characters
[[:class:]]		Any character that is a member of the specified class

Common Character classes
[:alnum:] - Any alphanumeric character
[:alpha:] - Any alphabetic character
[:digit:] - Any numeral
[:lower:] - Any lowercase letter
[:upper:] - Any uppercase letter

Wildcard examples
* - all files
g* - Any file beginning with g
b*.txt - Any file beginning with b followed by any charcters and ending with .txt
Data??? Any file beginning with Data followed by exactly three characters
[abc]* - Any file beginning with either a, b, or c
BACKUP.[0-9][0-9][0-9] - Any file beginning with BACKUP. followed by any three numerals
[[:upper:]]* Any file beginning with an uppercase letter
[![:digit:]]* Any file not beginning with a digit
*[[:lower:]123] Any file ending with a lowercase letter or the numerals 1, 2 or 3.


Be careful with rm!
Unix like operating systems such as Linux do not have an undeleted command. Once you delete something, it's gone. Linux assumes you're smart enough to know what you're doing.
Be particularly careful with wildcards:
rm *.html
Will remove all html files but accidentally include a space...
rm * .html
The rm command will remove all files in a directory and then complain that there was no .html file.
Tip, test your rm commands with ls first!

ln - Create links


Hard links are the original Unix way of creating links; symbolic are much more modern. By default every file has a single hard link that gives its name. Hard links have two important limitations
	A hard link cannot reference a file outside its own filesystem. This means a link cannot reference a file that is not on the same disk partition as the link itself
	A hard link cannot reference a directory
A hard link is therefore indistinguishable from the file itself. Unlike a directory list containing a symbolic link, a directory list containing a hard link shows no special indication of the link. When a hard link is deleted, the link is removed but the file contents continue to exist until all link to the file are removed.
When thinking about hard links, it is helpful to imagine that files are made up of two parts: the data part containing the file's contents and the name part, which holds the file's name. When we create hard links, we are actually creating additional name parts that all refer to the same data part. The system assigns a chain of disk blocks to what is called an inode, which is then associated with the name part. Each hard links therefore refers to a specific inode containing the file's contents. Invoking ls with the -i option shows the inode number associated with the file.

Modern practice prefers symbolic links
Symbolic links were created to overcome the limitations of hard links. Symbolic links work by creating a special type of file that contains a text pointer to the referenced file or directory (much like a shortcut in windows).
A file pointed to by a symbolic link and the symbolic link itself are largely indistinguishable from one another. Broken links (file deleted but s link remains) are often highlighted in red by the ls command. One thing to remember when working with symbolic links is that most of the commands are carried out on the link's target, not the link itself. rm is an exception. rm causes the link to be removed rather than the target.

A cool command line trick. It is possible to put more than one command on the command line by using a semicolon.