REFERENCES

Variables can store integer and values. These are both value types in Python

>>> spam = 42
>>> cheese = spam
>>> spam = 100
>>> spam
100
>>> cheese
42

>>> spam = 'foo'
>>> cheese = spam
>>> spam = 'bar'
>>> cheese
'foo'

But lists don't work this way. When you assign a list to a variable, you are actually assigning a reference to the variable. A reference is a value that points to some bit of data, and list reference is a value that points to a list. 

>>> spam = [0,2,4,6]
>>> cheese = spam
>>> cheese[1] = 'hello'
>>> spam
[0, 'hello', 4, 6]

Both lists changed as they both contain the same reference to the data on  the heap.

COPY AND DEEPCOPY FUNCTIONS

Although passing around references is often the handiest way to deal with lists and dictionaries, if the function modifies the list or dictionary that is apssed you may not want  these changes in the original list or dictionary value. For this we have Python's copy module 

>>> import copy
>>> spam = ['A', 'B', 'C', 'D']
>>> cheese = copy.copy(spam)
>>> cheese[1] = 2
>>> cheese
['A', '2', 'C', 'D']
>>> spam
['A', 'B', 'C', 'D']

The copy makes sure that the cheese and spam refer to seperate lists (have different references).  If the list you need to copy contains more lists then deepcopy() function is needed

Summary

Lists are useful data types since they allow you write code that works on a modifiable number of values in a single variable. They are mutable unlike tuples and strings which are immutable. Variables do not store lists directly, but references to lists.