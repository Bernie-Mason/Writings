Question_log

Date: 11/09/2017
	How do I access the launch settings (i.e. the localhost parameter) in an ASP.NET core project from another project?
	Should I be binding my models in the API?

Date: 05/09/2017
	Should ids be exposed in the view models?

Date: 31/08/2017

Date: 21/08/2017
	Should I have separate db tables for sideboard_deck_card and main_deck_card

	For my deck_view_model I can't generate 

	Should the deck table in the database be autoincremented
?
Data 24/07/17 - 31/07/17
	Test writing -  should i write tests for the card parser? I would like to chat to boss-man about this tomorrow as I'm pretty rubbish at writing tests.

Date: 11/07/17 - 21/07/17 - Code review pushed back
	Question_1 : I really need to go through the abstract classes in the data access layer and wiring up of dependencies. I don't fully understnad what I'm doing here yet.
		1b : Look at writing a service for the card parser. Reducing some of the massive amounts of database populator code.
	Question_2 : What are meant by endpoint and 'The truth'?
	Question_3: Which tables should we be auto-incrementing? I can't quite make out which ones should yet.
	Question_4: I have a number of absolute paths in my bloodbraid code. Should I change them to relative paths? What's the best way of dealing with referencing something like the json library folder as it isn't in the same folder as the bloodbraid directory? I could copy the library into the bloodbraid folder each time I update?
	Question_5: Why do some tables that only contain foreign keys (like card_set and card_legality) also have their own separate primary keys? Are these necessary?

	Issue_1: Had to change some of the MySql in stored procedure properties to VARCHAR from NVARCHAR as for some reason this allowed me to populate the card model. Don't understand this.
		Apparently this was an issue with MySql in C# where it wasn't assigning the correct MySql type to the data (I think that maybe it was assigning the type based on the contents of the property - numbers in the case of power and toughness). RESOLVED
	Issue_2: I need to be update and delete columns that are foreign key references easily. It seems like CASCADE ON DELETE/UPDATE in the table generation would be effective. However, this doesn't seem to work? What am I missing here?
		At the moment I'm deleting all entries followed by creating entries. This is slightly redundant as I'm having to run the migration script each time I want to update the tables as I haven't solved the above problem. A further issue is that even if I delete all the entries of an autoincremented table and then add more entries, MySQL remembers the final value of the id column and autoincrements the new values from there.

	Change_1: Changed schema to have a set_booster_format table that contains foreign key references for set and boosterformat. This allows set to be devoid of foreign keys and makes the linking of set and booster format somewhat easier. I think.

Data: 05/07/17 - 11/07/17
	Question_1: I have a number of absolute paths in my bloodbraid code. Should I change them to relative paths? What's the best way of dealing with referencing something like the json library folder as it isn't in the same folder as the bloodbraid directory? I could copy the library into the bloodbraid folder each time I update?

	Question_2: I have a few database tables with zero primary keys. These are tables that pretty much only consist of foreign keys for linking other tables

	Question_3: Which tables should we be auto-incrementing? I can't quite make out which ones should yet.

	Question_4: I'm pretty sure that we need to populating the tables that only contain foreign keys last. Is that correct?


Date: 03/07/17

	Concerning: The card importer application (BloodBraid.CardParser)

	Question_1: How should the database models be set up in C#; should I try to have the models almost exactly match MySQL database schema tables?
		1a: I'm having difficulty representing highly normalised tables (like language or booster_format_item) which only contains a few items and other tables simply have a column keyed to their id. How should this be represented in the domain model? It makes sense to me to have a dictionary that has an id and object paired (i.e. (0, "en" ; 1, "fr" .. etc)) and then having an ObjectId property for objects that use them. The difficulty with this is that there is no link in the model. 
			A: There are a few ways of doing this including autogenerating some enums so we can code against these highly normalised classes.

	Question_2: What C# type should we use to represent the booster field?
		A: Instead, let's map the JArray straight into a domain model

	Question_3: What tests should I write for the card importer?
		A: We'll write some tests once we have something that's functional!

	Question_4: What is the difference between a database model and a domain model? I guess that the domain model will not be updating the card and set portions of the database?
		Question_4b: How should foreign keys be represented in the C# database model?

	Question_5: When should/shouldn't I be using statics? Write down the answer in your notes on statics!