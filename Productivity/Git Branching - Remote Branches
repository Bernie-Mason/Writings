Git Branching - Remote Branches

Remote references are references (pointers) in your remote repositories, including branches, tags and so on. You can get a full list of remote references explicitly with git ls-remote [remote], or git remote show [remote] for remote branches as well as more info.

	BAN@BAN-TOP MINGW64 ~/Documents/Git_Test (master)
	$ git remote show origin
	* remote origin
	  Fetch URL: git@github.com:Bernie-Mason/Test_Repo.git
	  Push  URL: git@github.com:Bernie-Mason/Test_Repo.git
	  HEAD branch: master
	  Remote branch:
	    master tracked
	  Local branch configured for 'git pull':
	    master merges with remote master
	  Local ref configured for 'git push':
	    master pushes to master (fast-forwardable)

	BAN@BAN-TOP MINGW64 ~/Documents/Git_Test (master)
	$ git ls-remote origin
	fee77cddb6cf8b5bd5ce5318c11f603f95c0edea        HEAD
	fee77cddb6cf8b5bd5ce5318c11f603f95c0edea        refs/heads/master
	e767424c5be51296ab6b41b1ba991580f7ffba5a        refs/tags/v0.1
	c22a0fb6fc10f233684768e9f0c3935f59b60ec5        refs/tags/v0.1^{}
	8e4f7ad71608ff0245903ba4ba2a1e9a3114d470        refs/tags/v1.0
	13911a83b24069e4f4003121a3c0699ce6ea95d4        refs/tags/v1.0^{}

Remote-tracking branches are references to the state of remote branches. They're local references that you can't move; they're moved automatically for you whenever you do any network communication. Remote-tracking branches act as bookmarks to remind you where the branches in your remote repos were the last time you connected to them.

They take the form  (remote)/(branch). For instance, if you wanted to see what the master branch on your origin remote looked like as of the last time you communicated with it, you would check the origin/master branch. If you were working on an issue with a partner and they pushed an iss53 branch, you might have your own local iss53 branch, but the branch on the server would point to the commit at origin/iss53. 

"origin" is the default name for a remote when you run git clone. It is not special to git in any way just like master is not special. If you run

	$ git clone -o booyah

you will have booyah/master as your default remote branch.

	BAN@BAN-TOP MINGW64 ~/Documents/Git_Test (master)
	$ glodga
	* acaae65 (HEAD -> master, origin/master) added a couple of folders
	| * eb3dbeb (serverfix) added a server fix
	|/
	*   da81088 (iss53) merge issue sorted
	|\
	| * 327c616 updated index.html to have a body
	| * 67ebaba finished adding a title
	| * daea942 added a new footer [issue 53]
	* | fee77cd updated the index.html master branch to have a different set of text in the same place
	* | 8c75fb4 up to date
	* | 48294e2 fixed
	* | 863f8ea added a Hello_Kitty.html file
	|/
	* 6f62aad made other changes
	| * 6d18246 (origin/testing, testing) Added theGods.txt
	| * 3ee2953 made a change
	|/
	* 08df60e This is a great commit message
	* 13911a8 (tag: v1.0) tidy up!
	* f1ae37f Corrected commit
	* a05855d Second commit of test project
	* c22a0fb (tag: v0.1) Initial commit


	BAN@BAN-TOP MINGW64 ~/Documents/Git_Test (master)
	$ git checkout serverfix
	Switched to branch 'serverfix'

	BAN@BAN-TOP MINGW64 ~/Documents/Git_Test (serverfix)
	$ git push origin serverfix
	Counting objects: 3, done.
	Delta compression using up to 8 threads.
	Compressing objects: 100% (2/2), done.
	Writing objects: 100% (3/3), 320 bytes | 0 bytes/s, done.
	Total 3 (delta 1), reused  0(delta 0)
	remote: Resolving deltas: 100% (1/1), completed with 1 local object.
	To github.com:Bernie-Mason/Test_Repo.git
	 * [new branch]      serverfix -> serverfix

Here we created a new branch called serverfix and pushed it to the origin remote. Git automatically expanded the serverfix branchname out to refs/heads/serverfix:refs/heads/serverfix which means "take my serverfix local branch and push it to u. You can also go:

	$ git push origin serverfix:serverfix

This essential says take my serverfix branch and make it the remote's serverfix. If you want it to be called something else on the remote.

Tracking Branches
Checking out a local branch from a remote-tracking branch automatically creates what is called a "tracking branch". The branch it tracks is called an upstream branch. Tracking branches are local branches that have a direct relationship with to a remote branch. If you're on a tracking branch and type git pull, Git automatically knows which server to fetch from and branch to merge into.

When you clone a repo, it generally creates a master branch that tracks origin/master. However, you can set up other tracking branches if you want. 

$ git checkout -b [branch] [remotename]/[branch]

or 

$ git checkout --track [remotename]/[branch]

or even

$ git checkout [branch]

To set up a local branch will a different name to the remote branch, you can easily use the first version with a different local branch name.

$ git checkout -b [newname] [remotename]/[branch]

If you already have a local branch and want to set it to a remote branch:

	BAN@BAN-TOP MINGW64 ~/Documents/Git_Test (testing)
	$ gbch god_branch
	Switched to a new branch 'god_branch'

	BAN@BAN-TOP MINGW64 ~/Documents/Git_Test (god_branch)
	$ git branch -u origin/testing
	Branch god_branch set up to track remote branch testing from origin.

	BAN@BAN-TOP MINGW64 ~/Documents/Git_Test (god_branch)
	$ grbi
	* remote origin
	  Fetch URL: git@github.com:Bernie-Mason/Test_Repo.git
	  Push  URL: git@github.com:Bernie-Mason/Test_Repo.git
	  HEAD branch: master
	  Remote branches:
	    awesomebranch tracked
	    master        tracked
	    testing       tracked
	  Local branches configured for 'git pull':
	    god_branch       merges with remote testing
	    master           merges with remote master
	    serverfixrenamed merges with remote serverfixrenamed
	    testing          merges with remote testing
	  Local refs configured for 'git push':
	    master  pushes to master  (fast-forwardable)
	    testing pushes to testing (up to date)

If you want to see what tracking branches you have set up, you can use the -vv option to git branch:

BAN@BAN-TOP MINGW64 ~/Documents/Git_Test (god_branch)
$ git branch -vv
* god_branch       c7b26cf [origin/testing] god branch update
  iss53            da81088 merge issue sorted
  master           897e3c6 [origin/master: ahead 2] Merge branch 'testing'
  serverfixrenamed eb3dbeb [origin/serverfixrenamed: gone] added a server fix
  testing          70149fe [origin/testing: behind 1] added god file 2
  

  