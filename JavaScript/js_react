React notes

WHAT IS REACT?

React is a declarative, efficient and flexible JS library for building UIs. 
React has a few different kinds of components, but we'll start will 
React.Component subclasses:
*/

class ShoppingList extends React.Component {
    render() {
        return (
            <div className='shopping-list'>
                <h1>Shopping list for {this.props.name}</h1>
            <ul>
                <li>Instagram</li>
                <li>WhatsApp</li>
                <li>Oculus</li>
            </ul>
        </div>);
    }
}
/* 
Your components tell React what you want to render - then react will efficiently update
and render just the right components when your data changes. Here, ShoppingList is a 
react component class, or React component type. A component takes in parameters, called
props, and returns a hierarchy of views to display via the render method.

The render method returns a description of what you want to render. Then React takes that
description and renders it to the screen. In particular, render returns a React element,
which is a lightweight description of what to render. Most React devs use a special
syntax called JSX which makes it easier to write these structures. The <div> syntax is 
transformed at build time to React.createElement('div')

ELEMENTS
An element describes what you want to see on the screen. With JSX enabled:

const element = <h1>Hello, world</h1>

Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match React elements. JSX is a syntax extension to JS. 

EMBEDDING EXPRESSIONS IN JSX    

After compilation, JSX expressions become regular JS objects. That means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments and return it from functions:

export function getGreeting(user){
    if(user){
        return <h1>Hello, {formatName(user)}!</h1>;
    }
    return <h1>Hello, Stranger</h1>;
}

JSX REPRESENTING OBJECTS

Babel compiles JSX down to React.createElement() calls:

These two are identical

const element = (
    <h1 className = "greeting">
        Hello, world!
    </h1>
)

const elemeent = React.createElement(
    'h1',
    {className: 'greeting'},
    'Hello, world!'
)

React.createElement() perfroms a few checks to help you write bug-free code but essentially it creates objects like: 

// Note: this structure is simplified
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world'
  }
};

These objects are called "React elements". You can think of them as descriptions of what you see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date. 

Elements are what components are made of.

RENDERING AN ELEMENT:

You have an html element:
<div id="root"></div>

We call this a "root" DOM node because everything inside it will be managed by React DOM. Apps built with just React usually have a single root DOM node, if you are integrating React into an existing app, you may have many isolated root DOM nodes as you like. 

To render a React element into a root DOM node, pass both to ReactDOM.render()

const element = <h1>Hello, world</h1>
ReactDOM.render(
    element,
    document.getELementById("root"))

React elements are immutable. Once you create an element, you can't change its children or attributes. An element is like a single frame in a movie:it represents the UI at a certain point in time. 

The only way to update the UI is to create a new element, and pass it ReactDOM.render()

function tick() {
  const element = (
    <div>
      { element2 }
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  ReactDOM.render(
    element,
    document.getElementById('root')
  );
}

setInterval(tick, 1000);

REACT ONLY UPDATES WHATS NECESSARY

React DOM compares the element its children to the prvious one, and only applies the DOM updates necessary to bring the DOM to the desired state.


COMPONENTS AND PROPS

Eleme

A function is a valid React component when it accepts a single "props" object argument with data and returns a React element (using JSX, React.createElement etc). i.e.

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

You can also use an ES6 class to define a component:

class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}

RENDERING A COMPONENT

Elements can also be represented by user-defined components.

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

// Here our element represents the welcome function (or class if we want)
const element = <Welcome name="Sara" />;
ReactDOM.render(
  element,
  document.getElementById('root')
);

When React sees an element representing a user-defined component, it passes JSX attributes to this component as a single object called 'props'

  1. We call React.DOM.render() with the <Welcome name="Sara" /> element. 
  2. React calls the Welcome component with { name: 'Sara' } as the props. 
  3. Our Welcome component returns a <h1>Hello, Sara</h1> element as the result. 
  4. React DOM efficiently updates the DOM to match

CAVEAR: ALWAYS START COMPONENT NAMES WITH A CAPITAL LETTER!!

COMPOSING COMPONENTS

Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.


function App() {
  return (
    <div>
      <Welcome2 name="Allan" />
      <Welcome2 name="Beatrice" />
      <Welcome2 name="Charlie" />
    </div>
    );
}

ReactDOM.render(
    <App />,
    document.getElementById('composing')
  );

Typically, new React apps have a single App component at the very top. However, if you integrate React into an existing app, you might start bottom-up with a small component like Button and gradually work your way to the top of the view hierarchy.

EXTRACTING COMPONENTS

Don't be afraid to split components into smaller components.

PROPS ARE READYONLY

Whether you declare a component as a function or class, it must never modify its own props. All react components must act like pure functions with respect to their props.

STATE AND LIFECYCLE

So far we've only learned one way to update the UI. We call ReactDOM.render() to change the rendered output like in our ticking clock example.

function tick() {
  const element = (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  ReactDOM.render(
    element,
    document.getElementById('root')
  );
}

setInterval(tick, 1000);

We can start by encapsulating how the clock looks: 

function Clock(props) {
  return (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {props.date.toLocaleTimeString()}.</h2>
    </div>
  );
}

function tick() {
  ReactDOM.render(
    <Clock date={new Date()} />,
    document.getElementById('root')
  );
}

setInterval(tick, 1000);

However, it misses the crucial requirement: the fact that the Clock sets up a timer and updates the UI every second should be an implementation detail of the Clock

Ideally we want to write this once and have the Clock update itself

ReactDOM.render(
  <Clock />,
  document.getElementById('root')
);

To implement this, we need to add "state" to the Clock component. State is similar to props, but it is private and fully controlled by the component.

Components defined as classes have additional features. Local state is exactly that:

Note how we pass props to the base constructor. Class components should always call the base constructor with props.

class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

ReactDOM.render(
  <Clock />,
  document.getElementById('root')
);

ADDING LIFECYCLE METHODS TO A CLASS

In apps with many components, it's important to free up resources taken by components when they are destroyed. We want to set up a timer whenever the Clock is rendered to the DOM for the first time. This is called "mounting".

We also want to clear than timer whenever the DOM produced by the Clock is removed. This is called "unmounting" in React.

These two methods are called "lifecycle hooks". Like render these are special react functions that are  

The componentDidMount hook runs after the component output has been rendered to the DOM. This is good place to set up a timer.


componentDidMount(){
  this.timerID = setInterval(
      () => this.tick(),
      1000
    )
}

Note how we save the timer ID right on this. While this.props is set up by React itself and this.state has a special meaning, you are free to add additional fields to the class manually if you need to store something that is not used for the visual output. 

If you don't use something in render(), it shouldn't be in the state.

The timer is torn down in the componentWillUnmoust() lifecycle hook:

componentWillUnmount(){
    clearInterval(this.timerID)
}

Finally, we need a tick method that the Clock component will run every second.

tick() {
  this.setState({
    date: new Date()
  });
}

Altogether: 

class Clock extends React.Component {
  // Our class constructor assigns the initial state
  constructor(props){
    // we pass props to the base constructor - all class
    // components should do this
    super(props);
    this.state = {date: new Date()};
  }

  // These two methods are called "lifecycle hooks"
  // 3. When the Clock output is inserted in the DOM, React calls this 
  // lifecycle hook. Inside it, the Clock component asks the browser to set up
  // a timer to call the component's tick() method once a second.
  componentDidMount(){
    this.timerID = setInterval(
        () => this.tick(),
        1000
      )
  }

  // 5. If the clock component is ever removed from the DOM, React calls
  // this lifecycle hook so the timer is stopped.
  componentWillUnmount(){
      clearInterval(this.timerID)
  }

  // 4. Every second, the browser calls the tick() method. Inside it, the Clock
  // component schedules a UI update by called setState() with an object containing
  // the current time. Thanks to the setState() call, React knows the state
  // has changes, and calls render() again to learn what should be on the screen.
  // This
  tick(){
    this.setState({
      date: new Date()
    })
  }

  // 2. React then calls the Clock component's render() method. This is
  // how React learns what should be displayed on the screen. React then updates
  // the DOM to match the Clock's render output.
  render(){
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

ReactDOM.render(
  // 1. <Clock /> is passed to ReactDOM.render(). React calls the constructor
  // of the Clock component. Since Clock needs to display the current time,
  // it initialises this.state with an object including the current time.
  <Clock />,
  document.getElementById('tick')

USING STATE CORRECTLY
There are three things we should know about setState()

  1. DON'T MODIFY STATE DIRECTLY  
    use setState() i.e. this.setState({comment: 'Hello'});
  2. STATE UPDATES MAY BE ASYNC
    React may batch multiple setState() calls into a single update for performance. Because this.props and this.state may be updated asynchronously, you shouldn't rely on their values for calculating the next state.

    // Wrong
    this.setState({
      counter: this.state.counter + this.props.increment,
    });

    To fix it, use a second form of setState() that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:

    this.setState((previousState, props) => ({
      counter: prevState.counter + props.increment
    }))

    Be careful of assigning from state or props when not in your render function

  3. STATE UPDATES ARE MERGED
    When you call setState(), React merges the object you provide into the current state. For example, your state may contain several independent variables:
    constructor(props) {
       super(props);
       this.state = {
         posts: [],
         comments: []
       };
     }

     Then you can update them independently with separate setState() calls

     componentDidMount(){
      fetchPosts().then(response => {
        this.setState({
          posts: response.posts
        });
      });

      fetchComments().then(response => {
        this.setState({
          posts: response.comments
        });
      });

      the merging is shallow so this.setState({comments}) leaves this.state.posts intact, but completely replaces this.state.comments.
     }

THE DATA FLOWS DOWN

Neither the parent nor child components can know if a certain component is stateful or stateless, and they shouldn't care whether it's defined as a function or a class. This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it. 

A component may choose to pass its state down as props to its child components:

<h2>It is {this.state.date.toLocaleTimeString()}.</h2>

Or with a user defined component:

<FormattedDate date={this.state.date}/>

The FormmattedDate component would receive the date in its props and wouldn't know whether it came from the Clock's state, from the Clock's props, or was typed by hand:

function FormattedDate(props){
  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;
}


This is commonly called a "top-down" or "unidirectional" data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components "below" them in the tree.

If you imagine a component tree as a waterfall of props, each component's state is like an additional water source that joins it at an arbitrary point but also flows down.

To show that all components are truly isolated, we can create an App component that renders three <Clock>s:

function App() {
  return (
    <div>
      <Clock />
      <Clock />
      <Clock />
    </div>
  );
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);

Each Clock sets up its own timer and updates independently. In React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.

HANDLING EVETS
Handling events with React elements is very similar to handling events on DOM elements. There are some syntactic differences. React events are named using camelCase, rather than lowercase. 

With HTML:
<button onclick="activateLasers()">
  Activate Lasers
</button>

With React:
<button onClick={activateLasers}>
  Activate Lasers
</button>

Another difference if that you can't return false to present default behavior in React. You must call preventDefault explicitly. For example, with plain HTML, to prevent the default link behavior of opening a new page, you can write:

<a href="#" onclick="console.log('The link was clicked.'); return false">
  Click me
</a>

In React, this could instead be:

function ActionLink() {
  function handleClick(e) {
    e.preventDefault();
    console.log('The link was clicked.');
  }

  return (
    <a href="#" onClick={handleClick}>
      Click me
    </a>
  );
}

CONDITIONAL RENDERING
We can use if statements to decide what we want to render

function UserGreeting(props) {
  return <h1>Welcome back!</h1>;
}

function GuestGreeting(props) {
  return <h1>Please sign up.</h1>;
}

function Greeting(props) {
  const isLoggedIn = props.isLoggedIn;
  if (isLoggedIn) {
    return <UserGreeting />;
  }
  return <GuestGreeting />;
}

ReactDOM.render(
  // Try changing to isLoggedIn={true}:
  <Greeting isLoggedIn={false} />,
  document.getElementById('root')
);

CONTROLLED COMPONENTS

In HTML, form elements such as <input>, <textarea> and <select> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of component, and only updated with setState(). 

We can combine the two by making the React state be the "single source of truth". Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a "controlled component".

For example if we want to log the name when it's submitted, we can write the form as a controlled component:

class NameForm extends React.Component{
  constructor(props){
    super(props);
    this.state = { value: ''}

    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleChange(event){
    this.state({value: event.target.value});
  }

  handleSubmit(event){
    alert('A name was submitted: ' + this.state.value);
    event.preventDefault();
  }

  render(){
    return (
        <form onSubmit={this.handleSubmit}>
          <label>
            Name:
            <input type="text" value={this.state.value} onChange={this.handleChange} />
          </label>
          <input type="submit" value="Submit" />
        </form>
      );
  }
}

Since the value attribute is set on our form element, the display value will always be this.state.value, making the React state the source of truth. Since handleChange runs on every keystroke to update the React state, the displayed value will update as the user types. 

With a controlled component, every state mutation will have an associated handler function. This makes it straightforward to modify or validate user input. For example, if we wanted to enforce that names are written with all uppercase letters, we could write handleChange as:

handleChange(event){
  this.setState({value: event.target.value.toUpperCase()})
}

The textarea tag

