<Provider store>

This makes the Redux store available to the connect() calls in the component hierarchy. If you really need, you can manually pass store as a prop to every connect()ed component, but we only recommend doing this for stubbing store in unit tests.

connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])
	
	Connects a React component to a Redux store. connect is a facade around connectAdvanced, providing a convenient API for the most common use cases.
	[mapStateToProps(state, [ownProps]): stateProps] (Function): If this argument is specified, the new component will subscribe to Redux store updates. This means that any time the store is updated, mapStateToProps will be called. The results of mapStateToProps must be a plain object, which will be merged into the component's props. If you don't want to subscribe to store updates, pass null or undefined in place of mapStateToProps. If this function is declared taking two parameters, it will be called with the store state as the first parameter and the props passed to the connected component as the second parameter, and will also be re-invoked whenever the connected component receives new props as determined by shallow equality comparisons.
	[mapDispatchToProps(dispatch, [ownProps]): dispatchProps] (Object or Function): If an object is passed, each function inside it is assumed to be a Redux action creator. An object with the same function names, but with every action creator wrapped into a dispatch call so they may be invoked directly, will be merged into the component's props. If a function is passed, it will be given dispatch as the first parameter. it's up to you to return an object that somehow uses dispatch call so they may invoked directly, will be merged into the component's props.

Props
	store (Redux Store): The single Redux store in your application
	children (ReactElement): The root of your component hierarchy

Redux's state vs React's state:

Use React for ephemeral state that doesn't matter to the app globally and doesn't mutate in complex ways. For example, a toggle in some UI element, a form input state. Use Redux for state that matters globally or is mutated in complex ways. For example, cached users, or a post draft.

Sometimes you'll want to move from Redux state to React state (when storing something in Redux gets awkward) or the other way around (when more components need to have access to some state that used to be local).

React is for component state. Is a dropdown component open?
Redux is like the front end db and contains data, if you have something like product data fetched from an API