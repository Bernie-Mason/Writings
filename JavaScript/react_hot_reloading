React Hot Reloading

Iteration is of components is common but our workflows aren't often optimised for iteration.

Status Quo for javascript community
Refresh on every change
	i.e. changing a function
Reproduce the state
Repeat the actions
	click the button and see what happens

This is silly
	Most changes aren't drastic
	So we can preserve the state
	We needs that can recover from errors


What is Hot Reloading

No unmounting. No loss of state or props. We can continue working without needing to refresh. 
It is a compile time transform. React takes methods and keeps them separately. It creates proxys that call the methods. But anytime we save a file it points to the new method. Methods like render, componentDidUpdate and handleClick. 
This is all possible because render() is declarative. It does not have side effects; it returns a description. 

method signature
(state, action) => state
It's a reducer! If you have an array of actions (like unit tests), we can call reduce on them and return the result state of the reducer.

Reducers + Flux => Redux!

THREE PRINCIPLES

Redux can be described in three fundamental principles

1. SINGLE SOURCE OF TRUTH

The state of your whole application is stored in an object tree with a single store. 

This makes it easy to create universal apps, as the state from your server can be serialized and hydrated into the client with no extra coding effort. A single state tree also makes it easier to debug or inspect an application; it also enables you to persist your app's state in development, for a faster development cycle. Some functionality which has been traditionally difficult to implement - Undo/Redo, for example - can suddenly become trivial to implement, if all of your state is stored in a single tree. 

2. STATE IS READ ONLY

The only way to change the state is to emit an action, an object describing what happened.

This ensures that neither the views nor the network callbacks will ever write directly to the state. Instead, they express an intent to transform the state. Because all changes are centralized and happen one by one in a strict order, there are no suitable race conditions to watch out for. As actions are just plain objects, they can be logged, serialized, stored, and later replayed for debugging or testing purposes

3. CHANGES ARE MADE WITH PURE FUNCTIONS

To specify how the state tree is transformed by actions, you write pure reducers

Reducers are pure functions that take the previous state plus an action and return the next state. Remember, to return new state objects, instead of mutating the previous state. You can start with a single reducer, and as your app grows, split off into smaller reducers that manage specific parts of the state tree. Because reducers are just functions, you can control the order in which they are called, pass additional data, or even make reusable reducers for common tasks such as pagination.

